[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "omega-phr"
version = "0.9.3"
description = "Omega-Paradox Hive Recursion: AI Security Testing Framework"
authors = [
    {name = "Venkata Sai Chandu Chitikam", email = "chandu@portalvii.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11"
keywords = ["ai-security", "adversarial-testing", "temporal-paradox", "hive-attacks", "memory-inversion", "recursive-loops"]
classifiers = [
    "Development Status :: 5 - Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    # Core gRPC and Protocol Buffers
    "grpcio>=1.63.0",
    "grpcio-tools>=1.63.0",
    "protobuf>=4.25.3",
    "grpcio-reflection>=1.63.0",
    "grpcio-health-checking>=1.63.0",

    # High-performance databases
    "cassandra-driver>=3.29.1",
    "scylla-driver>=3.26.6",
    "aioredis>=2.0.1",
    "redis-py-cluster>=2.1.3",

    # Distributed computing and ML
    "ray[default]>=2.22.0",
    "torch>=2.3.0",
    "transformers>=4.42.0",
    "numpy>=1.26.4",
    "scipy>=1.13.0",
    "scikit-learn>=1.5.0",
    "nltk>=3.8.1",

    # Web framework and async
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.0",
    "starlette>=0.37.0",
    "websockets>=12.0",
    "asyncio>=3.4.3",
    "aiofiles>=23.2.0",

    # Monitoring and observability
    "prometheus-client>=0.20.0",
    "opentelemetry-api>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
    "opentelemetry-exporter-prometheus>=0.56b0",
    "structlog>=24.2.0",

    # Data validation and serialization
    "pydantic>=2.8.0",
    "pydantic-settings>=2.3.0",
    "orjson>=3.10.0",
    "msgpack>=1.0.8",

    # Security and cryptography
    "cryptography>=42.0.8",
    "pyjwt[crypto]>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "keyring>=24.0.0",
    "google-cloud-secret-manager>=2.16.0",

    # Network and communication
    "httpx>=0.27.0",
    "asyncio-mqtt>=0.16.2",
    "websocket-client>=1.8.0",

    # Utilities and helpers
    "tenacity>=8.4.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "python-multipart>=0.0.9",
    "watchdog>=4.0.0",

    # Additional stable dependencies
    "pydantic-yaml>=1.3.0",
    "psutil>=5.9.8",
    "setproctitle>=1.3.3",
    "uvloop>=0.19.0",
    "orjson>=3.10.0",
    "msgpack>=1.0.8",
]

[project.optional-dependencies]
dev = [
    # Code quality and formatting
    "ruff>=0.5.0",
    "black>=24.4.0",
    "isort>=5.13.0",
    "mypy>=1.10.0",
    "pylint>=3.2.0",

    # Testing framework
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.7",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.14.0",
    "factory-boy>=3.3.0",

    # Development tools
    "pre-commit>=3.7.1",
    "commitizen>=3.27.0",
    "bandit>=1.7.9",
    "safety>=3.2.0",

    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.0",

    # Jupyter and analysis
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.22.0",
]

enterprise = [
    # Enterprise-specific dependencies
    "gunicorn>=22.0.0",
    "gevent>=24.2.0",
    "psutil>=5.9.0",
    "setproctitle>=1.3.0",
]

gpu = [
    # GPU acceleration
    "torch-gpu>=2.3.0",
    "nvidia-ml-py>=12.555.0",
    "pynvml>=11.5.0",
]

cloud = [
    # Cloud platform integrations
    "google-cloud-storage>=2.17.0",
    "google-cloud-secret-manager>=2.20.0",
    "google-cloud-monitoring>=2.21.0",
    "boto3>=1.34.0",
    "azure-storage-blob>=12.20.0",
]

[project.urls]
homepage = "https://github.com/Chandu00756/Omega-PHR"
repository = "https://github.com/Chandu00756/Omega-PHR"
documentation = "https://omega-phr.readthedocs.io"
changelog = "https://github.com/Chandu00756/Omega-PHR/blob/main/CHANGELOG.md"
issues = "https://github.com/Chandu00756/Omega-PHR/issues"

[project.scripts]
omega-phr = "omega_phr.cli:main"
phr-timeline = "services.timeline_lattice.main:main"
phr-hive = "services.hive_orchestrator.main:main"
phr-memory = "services.memory_inversion.main:main"
phr-loops = "services.recursive_loop_synth.main:main"
phr-register = "services.omega_register.main:main"
phr-telemetry = "services.telemetry_exporter.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["omega_phr*", "services*", "libs*"]
exclude = ["tests*", "examples*", "docker*"]

[tool.setuptools.package-data]
"*" = ["*.proto", "*.yaml", "*.yml", "*.json", "*.toml"]

# Development and CI/CD configuration
[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*_pb2.py",
    "*_pb2_grpc.py",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "S101",  # assert statements in tests
    "S603",  # subprocess calls
    "S607",  # starting process with partial executable path
    "T201",  # print statements allowed in CLI tools
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "S106", "S108"]
"examples/**/*.py" = ["T201", "S101"]
"**/main.py" = ["T201"]
"services/**/server*.py" = ["N802"]  # gRPC server methods use PascalCase

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | __pycache__
  | build
  | dist
  | node_modules
  | venv
  | .*_pb2\.py
  | .*_pb2_grpc\.py
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["omega_phr", "services", "libs"]
skip = ["__pycache__", ".venv", "build", "dist"]
skip_glob = ["*_pb2.py", "*_pb2_grpc.py"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
exclude = [
    ".*_pb2\\.py$",
    ".*_pb2_grpc\\.py$",
    "build/",
    "dist/",
    "venv/",
]

[[tool.mypy.overrides]]
module = [
    "cassandra.*",
    "scylla.*",
    "ray.*",
    "transformers.*",
    "torch.*",
    "numpy.*",
    "scipy.*",
    "sklearn.*",
    "nltk.*",
    "prometheus_client.*",
    "structlog.*",
    "orjson.*",
    "msgpack.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=omega_phr",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=0",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance benchmarks",
    "security: Security tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "cloud: Tests requiring cloud resources",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:torch.*",
]

[tool.coverage.run]
source = ["omega_phr", "services", "libs"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*_test.py",
    "*/_pb2.py",
    "*/_pb2_grpc.py",
    "*/examples/*",
    "*/benchmarks/*",
    "omega_phr/cli.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601", "B603"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.9.3"
tag_format = "v$version"
